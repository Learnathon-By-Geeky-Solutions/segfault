services:
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
      args:
        - DEV=true
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "8000:8000"
    volumes:
      - ./backend/codesirius:/app/codesirius
    working_dir: /app/codesirius
    command: >
      sh -c "mkdir -p /app/codesirius/logs && python manage.py runserver 0.0.0.0:8000"
    profiles:
      - production
    environment:
      - GITHUB_ACTIONS=${GITHUB_ACTIONS:-false}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shared

  db:
    image: postgres:14.15-alpine3.21
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - production
    networks:
      - shared

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: always
    profiles:
      - production
    networks:
      - shared

  sse-server-dev:
    build:
      context: backend/sse
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "4000:4000"
      - "50051:50051"
    volumes:
      - ./backend/sse:/app
      - /app/node_modules
    working_dir: /app
    command: >
      sh -c "npm run dev"
    profiles:
      - development
    networks:
      - shared

  sse-server-prod:
    build:
      context: backend/sse
      dockerfile: Dockerfile
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "4000:4000"
      - "50051:50051"
    env_file:
      - ./backend/sse/.env
    working_dir: /app
    command: >
      sh -c "npm run start"
    profiles:
      - production
    networks:
      - shared


  email-consumer:
    build:
      context: consumers/email-consumer
      dockerfile: Dockerfile
      args:
        - DEV=true
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    env_file:
      - ./consumers/email-consumer/.env
    volumes:
      - ./consumers/email-consumer:/home/codesirius/app
      - /home/codesirius/app/.venv
    working_dir: /home/codesirius/app
    command: >
      sh -c "poetry run email-consumer"
    profiles:
      - production
    networks:
      - shared

  hidden-test-consumer:
    build:
      context: consumers/hidden-test-consumer
      dockerfile: Dockerfile
      args:
        - DEV=true
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    env_file:
      - ./consumers/hidden-test-consumer/.env
    volumes:
      - ./consumers/hidden-test-consumer:/home/codesirius/app
      - /home/codesirius/app/.venv
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /home/codesirius/app
    command: >
      sh -c "poetry run python3 src/main.py"
    profiles:
      - production
    networks:
      - shared

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - DEV=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    working_dir: /app
    env_file:
      - frontend/.env
    command: >
      sh -c  "npm run dev"
    profiles:
      - development
    networks:
      - shared

  frontend-prod:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - DEV=false
    ports:
      - "3030:3030"
    volumes:
      - ./frontend/src:/app/src
    env_file:
      - frontend/.env
    working_dir: /app
    command: >
      sh -c  "npm run build && npm run start"
    profiles:
      - production
    networks:
      - shared

  nginx:
    image: nginx:1.21.3-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    restart: unless-stopped
    profiles:
      - production
    networks:
      - shared

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - production
    networks:
      - shared

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"  # Grafana UI on port 3001 (default is 3000, but you can change it)
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"  # Set an admin password (default is 'admin')
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - shared

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config:/etc/loki/config
      - ./loki/data:/loki
    command: -config.file=/etc/loki/config/loki-config.yml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - shared

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail/config:/etc/promtail
      - ./backend/codesirius/logs:/logs
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - shared

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/config:/etc/prometheus
    ports:
      - "9090:9090"
    command: --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - shared

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - shared

volumes:
  postgres_data:
  grafana_data:
  redis_data:
    driver: local

networks:
  shared:
    external: true
